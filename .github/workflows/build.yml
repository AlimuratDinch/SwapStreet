name: SonarQube Analysis

on:
  push:
    branches:
    - main
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  frontend-sonarqube:
    name: Frontend SonarQube
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: yarn
      working-directory: swapstreet

    - name: Run tests and collect coverage with threshold
      run: |
        yarn jest --coverage --coverageThreshold='{
          "global": {
            "branches": 80,
            "functions": 80,
            "lines": 80,
            "statements": 80
          }
        }'
      working-directory: swapstreet

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v6
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: swapstreet

    - name: Wait for SonarQube Quality Gate result
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: swapstreet/.scannerwork/report-task.txt

  backend-sonarqube:
    name: Backend SonarQube
    runs-on: windows-latest
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarQube Cloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner

    - name: Install dotnet-coverage
      run: dotnet tool install --global dotnet-coverage

    - name: Begin SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        cd backend
        "${{ runner.temp }}\scanner\dotnet-sonarscanner" begin `
          /k:"swapstreet" `
          /o:"swapstreet" `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
          /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml `
          /d:sonar.coverage.exclusions="**/Migrations/**"

    - name: Build backend
      shell: pwsh
      run: |
        cd backend
        dotnet build --no-incremental

    - name: Run tests and collect coverage with threshold
      shell: pwsh
      run: |
        cd backend
        dotnet-coverage collect "dotnet test --no-build" -f xml -o "coverage.xml"
        if (!(Test-Path "coverage.xml")) {
          Write-Error "coverage.xml not found!"
          exit 1
        }

        [xml]$cov = Get-Content "coverage.xml"
        $module = $cov.results.modules.module
        $lineCoverage = [double]$module.line_coverage
        Write-Host "➡ Backend test coverage: $lineCoverage%"
        if ($lineCoverage -lt 16) {
          Write-Error "Coverage below 16% ($lineCoverage%)"
          exit 1
        }

    - name: End SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        cd backend
        "${{ runner.temp }}\scanner\dotnet-sonarscanner" end `
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Debug — Locate report-task.txt
      shell: pwsh
      run: |
        Start-Sleep -Seconds 3
        Write-Host "Searching for report-task.txt..."
        Get-ChildItem -Path $PWD -Recurse -Filter "report-task.txt" | ForEach-Object { $_.FullName }

    - name: Wait for SonarQube Quality Gate result
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: backend/.scannerwork/report-task.txt
